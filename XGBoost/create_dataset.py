import pandas as pd
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import os
import numpy as np

import pandas as pd
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import os
import numpy as np
import re

def convert_and_encode(input_file, target_column, output_dir="encoded_data"):
    """
    Convertit un fichier .data ou .csv en un fichier CSV avec One-Hot Encoding 
    pour les variables cat√©goriques (sauf la colonne cible qui est class√©e de 0 √† n).
    
    :param input_file: Chemin du fichier .data ou .csv d'entr√©e
    :param target_column: Nom de la colonne cible √† ne pas encoder en one-hot
    :param output_dir: R√©pertoire o√π sauvegarder le fichier CSV encod√©
    """

    # 1. Charger le fichier
    df = pd.read_csv(input_file)

    # Normaliser les noms de colonnes (supprimer les espaces, convertir en minuscules)
    df.columns = df.columns.str.strip()

    # 1.1 Traiter les colonnes mixtes "num√©rique + lettre"
    for col in df.columns:
        if df[col].astype(str).str.match(r"^\d+[A-Za-z]$").all():
            print(f"üß™ Colonne '{col}' d√©tect√©e comme mixte nombre + lettre.")
            
            # S√©parer la partie num√©rique et la lettre dans deux nouvelles colonnes
            df[col + "_num"] = df[col].astype(str).str.extract(r"^(\d+)[A-Za-z]$").astype(float)
            df[col + "_flag"] = df[col].astype(str).str.extract(r"^\d+([A-Za-z])$")
            
            # Supprimer la colonne d'origine
            df.drop(columns=[col], inplace=True)

    # V√©rifier si la colonne cible existe
    if target_column not in df.columns:
        print(f"‚ö†Ô∏è La colonne cible '{target_column}' n'existe pas dans {input_file}.")
        print(f"üìå Colonnes disponibles : {list(df.columns)}")  # Debug : Afficher les colonnes
        return

    # 2. Identifier les colonnes num√©riques (Ne pas encoder)
    numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()

    # 3. Identifier les colonnes cat√©goriques (Seulement celles avec du texte)
    def is_categorical(column):
        return df[column].astype(str).str.contains(r'[a-zA-Z]', regex=True).any()

    categorical_features = [col for col in df.columns if col not in numeric_columns and is_categorical(col)]

    # Enlever la colonne cible des colonnes √† encoder
    if target_column in categorical_features:
        categorical_features.remove(target_column)

    if not categorical_features:
        print(f"Aucune colonne cat√©gorique d√©tect√©e pour {input_file}, sauvegarde sans modification.")
        output_filename = os.path.basename(input_file).replace(".data", ".csv")
        os.makedirs(output_dir, exist_ok=True)
        df.to_csv(os.path.join(output_dir, output_filename), index=False)
        print(f"üìÅ Fichier enregistr√© sous : {output_filename}")
        return

    print(f"üîç Colonnes cat√©goriques d√©tect√©es dans {input_file}: {categorical_features}")

    # 4. Appliquer One-Hot Encoding uniquement sur les colonnes cat√©goriques (sauf la cible)
    encoder = OneHotEncoder(sparse_output=False, drop="first")  # drop="first" pour √©viter la multicolin√©arit√©
    encoded_data = encoder.fit_transform(df[categorical_features])

    # 5. Convertir en DataFrame (avec entiers 0 et 1)
    column_names = encoder.get_feature_names_out(categorical_features)
    encoded_df = pd.DataFrame(encoded_data.astype(int), columns=column_names)

    # 6. Encodage de la colonne cible si elle est cat√©gorique
    if is_categorical(target_column):
        label_encoder = LabelEncoder()
        df[target_column] = label_encoder.fit_transform(df[target_column])
        print(f"üéØ La colonne cible '{target_column}' a √©t√© encod√©e en valeurs enti√®res : {list(label_encoder.classes_)}")

    # 7. Fusionner avec les colonnes num√©riques non modifi√©es et les colonnes encod√©es
    df_numeric = df[numeric_columns]  # Conserver uniquement les colonnes num√©riques
    final_df = pd.concat([df_numeric, encoded_df], axis=1)

    # 8. Assurer que la colonne cible est la derni√®re
    target_data = df[target_column]  # Extraire la colonne cible
    final_df[target_column] = target_data  # Ajouter la colonne cible √† la fin

    # 9. Sauvegarde du fichier encod√©
    os.makedirs(output_dir, exist_ok=True)
    output_filename = os.path.basename(input_file).replace(".data", ".csv")
    final_df.to_csv(os.path.join(output_dir, output_filename), index=False)

    print(f"‚úÖ Fichier encod√© enregistr√© sous : {output_filename}")


def process_data_folder(input_folder, target_column, output_folder="encoded_data"):
    """
    Parcourt un dossier et applique `convert_and_encode` √† tous les fichiers `.data` ou `.csv`.

    :param input_folder: Chemin du dossier contenant les fichiers .data
    :param target_column: Nom de la colonne cible
    :param output_folder: Dossier o√π sauvegarder les fichiers encod√©s
    """
    if not os.path.exists(input_folder):
        print("‚ùå Le dossier sp√©cifi√© n'existe pas.")
        return

    #  R√©cup√©rer tous les fichiers .data ou .csv du dossier
    data_files = [f for f in os.listdir(input_folder) if f.endswith(".data") or f.endswith(".csv")]

    if not data_files:
        print("‚ö†Ô∏è Aucun fichier .data ou .csv trouv√© dans le dossier.")
        return

    print(f"üìÇ {len(data_files)} fichiers trouv√©s : {data_files}")

    # Appliquer la conversion √† chaque fichier
    for file in data_files:
        file_path = os.path.join(input_folder, file)
        convert_and_encode(file_path, target_column, output_folder)

# Exemple d'utilisation :
# Assurez-vous de remplacer "output" par le vrai nom de la colonne cible
process_data_folder("datasets_train", "output", "datasets_train_encoded")
